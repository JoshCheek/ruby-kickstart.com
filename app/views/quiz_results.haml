- @quiz_taken.each_problem_with_solution_and_index do |problem, solution, index|
  .quizProblem
    %h3= index
    %h2~ markdown without_leading_whitepace(problem.question), :layout => false
  
    - case problem
  
  
    - when QuizMultipleChoiceProblem
      %ul
        - problem.options.each do |quiz_option|
          - css_class = if problem.correct?(quiz_option) then "correct quizAnswer" elsif solution.guessed?(quiz_option) then "incorrect quizAnswer" end
          %li.quizQuestion.radio{ :class => css_class }
            %input.quizQuestion{  :type       =>  "radio",
                                  :checked    =>  problem.correct?(quiz_option),
                                  :disabled   =>  true }
              = inline_markdown quiz_option
            
            
    - when QuizMatchAnswerProblem
      - css_class = (solution.correct? ? :correct : :incorrect)
      %input.quizQuestion.rounded{  :type     => "text", 
                                    :name     => "quiz_results[#{problem.id}]", 
                                    :value    => solution.answer, 
                                    :disabled => true,
                                    :class    => css_class }
      - if css_class == :incorrect
        = inline_markdown solution.failure_explanation
  
  
    - when QuizPredicateProblem
      %ul
        %li.radio.quizQuestion{ :class => (problem.predicate ? "correct quizAnswer" : solution.answer ? "incorrect quizAnswer" : '' ) }
          %input{ :type     => "radio",
                  :checked  => solution.answer,
                  :disabled => true }
            true
        %li.radio.quizQuestion{ :class => (!problem.predicate ? "correct quizAnswer" : !solution.answer ? "incorrect quizAnswer" : '' ) }
          %input{ :type     => "radio",
                  :checked  => !solution.answer,
                  :disabled => true }
            false
  
  
    - when QuizManyToManyProblem
      %ul
        - problem.question_set.each do |question|
          %li.quizQuestion.radio
            = inline_markdown question
            %select{ :class => (problem.guessed_correct?(question, solution.for(question)) ? "correct quizAnswer" : "incorrect quizAnswer" ) }
              - problem.solution_set.each do |potential_solution|
                %option{  :value     =>  potential_solution,
                          :disabled  =>  true,
                          :selected  =>  solution.guessed?(question, potential_solution) }
                  = inline_markdown potential_solution
  
    
    - else
      = raise "don't know how to ask #{problem.inspect}"
