- @quiz_taken.each_problem_with_solution_and_index do |problem, solution, index|
  %h3= index
  %h2~ markdown without_leading_whitepace(problem.question), :layout => false
  
  - case problem
  
  
  - when QuizMultipleChoiceProblem
    %ul
      - problem.options.each do |quiz_option|
        - css_class = if problem.correct?(quiz_option) then :correct elsif solution.guessed?(quiz_option) then :incorrect end
        %li{ :class => css_class }
          %input{ :type       =>  "radio",
                  :checked    =>  problem.correct?(quiz_option),
                  :disabled   =>  true }
            = quiz_option
            
            
  - when QuizMatchAnswerProblem
    - css_class = (solution.correct? ? :correct : :incorrect)
    %input{ :type     => "text", 
            :name     => "quiz_results[#{problem.id}]", 
            :value    => solution.answer, 
            :disabled => true,
            :class    => css_class }
    - if css_class == :incorrect
      = solution.failure_explanation
  
  
  - when QuizPredicateProblem
    %ul
      %li{ :class => (problem.predicate ? :correct : solution.answer ? :incorrect : '' ) }
        %input{ :type     => "radio",
                :checked  => solution.answer,
                :disabled => true }
          true
      %li{ :class => (!problem.predicate ? :correct : !solution.answer ? :incorrect : '' ) }
        %input{ :type     => "radio",
                :checked  => !solution.answer,
                :disabled => true }
          false
  
  
  - when QuizManyToManyProblem
    %ul
      - problem.question_set.each do |question|
        %li
          = question
          %select{ :class => (problem.guessed_correct?(question, solution.for(question)) ? :correct : :incorrect ) }
            - problem.solution_set.each do |potential_solution|
              %option{  :value     =>  potential_solution,
                        :disabled  =>  true,
                        :selected  =>  solution.guessed?(question, potential_solution) }
                = potential_solution
  
    
  - else
    = raise "don't know how to ask #{problem.inspect}"
